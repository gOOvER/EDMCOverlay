name: Build and Test EDMCOverlay

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  PYTHON_VERSION: '3.12'

jobs:
  test-python:
    name: Test Python Components
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Python tests
      run: |
        python -m pytest test_simple.py -v --cov=edmcoverlay --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage
        
  build-csharp:
    name: Build C# Application
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore EDMCOverlay/EDMCOverlay/EDMCOverlay_Modern.csproj
      
    - name: Build application
      run: dotnet build EDMCOverlay/EDMCOverlay/EDMCOverlay_Modern.csproj --configuration Release --no-restore
      
    - name: Run C# tests (if any)
      run: |
        if (Test-Path "EDMCOverlay/Tests") {
          dotnet test EDMCOverlay/Tests --configuration Release --no-build --verbosity normal
        } else {
          Write-Host "No C# tests found"
        }
      shell: powershell
      
    - name: Publish application
      run: dotnet publish EDMCOverlay/EDMCOverlay/EDMCOverlay_Modern.csproj --configuration Release --output ./publish --no-build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: edmcoverlay-build
        path: |
          ./publish/EDMCOverlay.exe
          ./publish/EDMCOverlay.dll
          ./publish/*.dll
          ./publish/*.config
          ./publish/*.json
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit Security Linter
      run: |
        pip install -r requirements.txt
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json
        
  code-quality:
    name: Code Quality Analysis
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install code quality tools
      run: |
        pip install -r requirements.txt
        
    - name: Run flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: Check code formatting with black
      run: black --check --diff .
      
    - name: Check import sorting
      run: isort --check-only --diff .
      
    - name: Run type checking
      run: mypy edmcoverlay.py edmcoverlay_improved.py --ignore-missing-imports
      
  integration-test:
    name: Integration Tests
    runs-on: windows-latest
    needs: [build-csharp]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: edmcoverlay-build
        path: ./build/
        
    - name: Run integration tests
      run: |
        python -c "
        import sys
        sys.path.append('.')
        try:
            from edmcoverlay_improved import Overlay
            print('[PASS] Import test passed')
            
            # Test configuration
            from config import Config
            config = Config()
            print(f'[PASS] Configuration test passed - Port: {config.server_port}')
            
            print('[PASS] All integration tests passed')
        except Exception as e:
            print(f'[FAIL] Integration test failed: {e}')
            sys.exit(1)
        "
        
  create-release:
    name: Create Release
    runs-on: windows-latest
    needs: [test-python, build-csharp, security-scan, code-quality, integration-test]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: edmcoverlay-build
        path: ./build-artifacts/
        
    - name: Create release package structure
      run: |
        # Create release directory
        New-Item -ItemType Directory -Force -Path "./release"
        
        # Copy Python plugin files to root of release
        Copy-Item -Path "load.py" -Destination "./release/"
        Copy-Item -Path "edmcoverlay.py" -Destination "./release/"
        Copy-Item -Path "edmcoverlay_improved.py" -Destination "./release/"
        Copy-Item -Path "config.py" -Destination "./release/"
        Copy-Item -Path "performance_monitor.py" -Destination "./release/"
        Copy-Item -Path "__init__.py" -Destination "./release/" -ErrorAction SilentlyContinue
        
        # Copy the built EDMCOverlay.exe from artifacts
        Copy-Item -Path "./build-artifacts/EDMCOverlay.exe" -Destination "./release/" -ErrorAction SilentlyContinue
        Copy-Item -Path "./build-artifacts/EDMCOverlay.dll" -Destination "./release/" -ErrorAction SilentlyContinue
        Copy-Item -Path "./build-artifacts/*.dll" -Destination "./release/" -ErrorAction SilentlyContinue
        Copy-Item -Path "./build-artifacts/*.config" -Destination "./release/" -ErrorAction SilentlyContinue
        
        # Copy documentation and metadata
        Copy-Item -Path "README.md" -Destination "./release/" -ErrorAction SilentlyContinue
        Copy-Item -Path "LICENCE.md" -Destination "./release/" -ErrorAction SilentlyContinue
        Copy-Item -Path "requirements.txt" -Destination "./release/" -ErrorAction SilentlyContinue
        
        # Copy any additional assets
        Copy-Item -Path "edmc-overlay-logo.bmp" -Destination "./release/" -ErrorAction SilentlyContinue
        Copy-Item -Path "edmcoverlay-rootca.cer" -Destination "./release/" -ErrorAction SilentlyContinue
        
        # List the final release structure
        Write-Host "Release package structure:"
        Get-ChildItem -Path "./release" -Recurse | Format-Table Name, Length, LastWriteTime
      shell: powershell
      
    - name: Create release archive
      run: |
        Compress-Archive -Path "./release/*" -DestinationPath "EDMCOverlay-${{ github.event.release.tag_name }}.zip"
        Write-Host "Created release archive: EDMCOverlay-${{ github.event.release.tag_name }}.zip"
        Write-Host "Archive size: $((Get-Item "EDMCOverlay-${{ github.event.release.tag_name }}.zip").Length) bytes"
      shell: powershell
      
    - name: Upload release asset
      uses: softprops/action-gh-release@v1
      with:
        files: ./EDMCOverlay-${{ github.event.release.tag_name }}.zip
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Results
    runs-on: windows-latest
    needs: [test-python, build-csharp, security-scan, code-quality]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test-python.result == 'success' && needs.build-csharp.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        echo "Python tests: ${{ needs.test-python.result }}"
        echo "C# build: ${{ needs.build-csharp.result }}"
        echo "Security scan: ${{ needs.security-scan.result }}"
        echo "Code quality: ${{ needs.code-quality.result }}"
        
    - name: Notify failure
      if: ${{ needs.test-python.result == 'failure' || needs.build-csharp.result == 'failure' }}
      run: |
        echo "❌ Some checks failed!"
        echo "Python tests: ${{ needs.test-python.result }}"
        echo "C# build: ${{ needs.build-csharp.result }}"
        echo "Security scan: ${{ needs.security-scan.result }}"
        echo "Code quality: ${{ needs.code-quality.result }}"
        exit 1